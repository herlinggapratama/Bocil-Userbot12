from asyncio import sleep
from typing import Optional

from pyrogram import enums, filters
from pyrogram.raw.functions.channels import GetFullChannel
from pyrogram.raw.functions.phone import CreateGroupCall, DiscardGroupCall
from pyrogram.raw.types import InputGroupCall, InputPeerChannel, InputPeerChat
from pytgcalls import GroupCallFactory

from Bocil import bot
from Bocil.config import HANDLER
from Bocil.helpers.tools import get_arg
from Bocil.modules.help import add_command_help

add_command_help(
    "vctools",
    [
        ["startvc", "Untuk Memulai video call group."],
        ["stopvc", "Untuk Memberhentikan video call group."],
        [
            "joinvc atau *joinvc <chatid/username gc>",
            "Untuk Bergabung ke video call group.",
        ],
        [
            "leavevc atau *leavevc <chatid/username gc>",
            "Untuk Turun dari video call group.",
        ],
    ],
)

for bo in bot._ubot:
    if not hasattr(bo, "group_call"):
        setattr(bo, "group_call", GroupCallFactory(bo).get_group_call())


async def get_group_call(
    client, message, err_msg: str = ""
) -> Optional[InputGroupCall]:
    chat_peer = await client.resolve_peer(message.chat.id)
    if isinstance(chat_peer, (InputPeerChannel, InputPeerChat)):
        if isinstance(chat_peer, InputPeerChannel):
            full_chat = (await client.send(GetFullChannel(channel=chat_peer))).full_chat
        elif isinstance(chat_peer, InputPeerChat):
            full_chat = (
                await client.send(GetFullChat(chat_id=chat_peer.chat_id))
            ).full_chat
        if full_chat is not None:
            return full_chat.call
    await eor(f"**No group call Found** {err_msg}")
    return False


@bot.on_message(filters.command("startvc", HANDLER) & filters.me)
async def opengc(client, message):
    flags = " ".join(message.command[1:])
    vctitle = get_arg(message)
    if flags == enums.ChatType.CHANNEL:
        chat_id = message.chat.title
    else:
        chat_id = message.chat.id
    sup = await message.reply("__Memproses...__")
    args = f"**Memulai Panggilan Grup**\n• **Chat Id:** `{chat_id}`"
    try:
        if not vctitle:
            await client.invoke(
                CreateGroupCall(
                    peer=await client.resolve_peer(message.chat.id),
                    random_id=client.rnd_id() // 9000000000,
                )
            )
        else:
            args += f"\n• **Title :** `{vctitle}`"
            await client.invoke(
                CreateGroupCall(
                    peer=await client.resolve_peer(message.chat.id),
                    random_id=client.rnd_id() // 9000000000,
                    title=vctitle,
                )
            )
        await sup.edit(args)
    except Exception as e:
        return await sup.edit(f"**INFO :** `{e}`")


@bot.on_message(filters.command("stopvc", HANDLER) & filters.me)
async def end_vc_(client, message):
    chat_id = message.chat.id
    msg = await message.reply("__Memproses...__")
    try:
        full_chat = (
            await client.invoke(
                GetFullChannel(channel=await client.resolve_peer(chat_id))
            )
        ).full_chat
        await client.invoke(DiscardGroupCall(call=full_chat.call))
        await msg.edit(f"**Mengakhiri panggilan grup di**\n**Chat ID :** `{chat_id}`")
    except Exception as e:
        return await msg.edit(f"**INFO :** `{e}`")


@bot.on_message(filters.command("joinvc", HANDLER) & filters.me)
async def joinvc(client, message):
    kontol = get_arg(message)
    tai = await message.reply("Processing...")
    chat_id = message.chat.id
    await message.delete()
    if not kontol:
        try:
            await client.group_call.start(chat_id)
        except Exception as e:
            return await tai.edit(f"**ERROR:** `{e}`")
        await tai.edit(
            f"❏ **Berhasil Join Ke Obrolan Suara**\n└ **Chat ID:** `{chat_id}`"
        )
    elif kontol:
        try:
            await client.group_call.start(kontol)
        except Exception as e:
            return await tai.edit(f"**ERROR:** `{e}`")
        await tai.edit(
            f"❏ **Berhasil Join Ke Obrolan Suara**\n└ **Chat ID:** `{kontol}`"
        )
    await sleep(5)
    await client.group_call.set_is_mute(True)


@bot.on_message(filters.command("leavevc", HANDLER) & filters.me)
async def leavevc(client, message):
    tai = await message.reply("Processing...")
    chat_id = message.chat.id
    kontol = get_arg(message)
    await message.delete()
    if not kontol:
        try:
            await client.group_call.stop()
        except Exception as e:
            return await tai.edit(f"**ERROR:** `{e}`")
        await tai.edit(
            f"❏ **Berhasil Turun dari Obrolan Suara**\n└ **Chat ID:** `{chat_id}`"
        )
    elif kontol:
        try:
            await client.group_call.stop()
        except Exception as e:
            return await tai.edit(f"**ERROR:** `{e}`")
        await tai.edit(
            f"❏ **Berhasil Turun dari Obrolan Suara**\n└ **Chat ID:** `{kontol}`"
        )
